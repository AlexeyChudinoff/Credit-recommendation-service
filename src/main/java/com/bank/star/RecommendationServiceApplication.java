package com.bank.star;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import java.io.File;

@SpringBootApplication
public class RecommendationServiceApplication {

  private static final Logger logger = LoggerFactory.getLogger(RecommendationServiceApplication.class);

  @Value("${spring.datasource.url:jdbc:h2:file:./data/transaction.mv.db}")
  private String databaseUrl;

  public static void main(String[] args) {
    SpringApplication.run(RecommendationServiceApplication.class, args);
  }

  @EventListener(ApplicationReadyEvent.class)
  public void checkDatabasePath() {
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    logger.info("Database URL: {}", databaseUrl);

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
      String filePath = databaseUrl.replace("jdbc:h2:file:", "").split(";")[0];
      File dbFile = new File(filePath);

      logger.info("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã: {}", dbFile.getAbsolutePath());
      logger.info("–§–∞–π–ª –±–∞–∑—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", dbFile.exists());

      if (dbFile.exists()) {
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", dbFile.length());
      } else {
        logger.error("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {}", filePath);
        logger.info("üí° –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", System.getProperty("user.dir"));

        // –ü–æ–∫–∞–∂–µ–º, –≥–¥–µ –∏—â–µ–º —Ñ–∞–π–ª
        File currentDir = new File(".");
        logger.info("üí° –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:");
        File[] files = currentDir.listFiles();
        if (files != null) {
          for (File file : files) {
            logger.info("   - {} ({})", file.getName(),
                file.isDirectory() ? "dir" : "file");
          }
        }
      }

    } catch (Exception e) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
    }
  }
}